#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values (free tier optimized)
DEFAULT_PROJECT=""
DEFAULT_ZONE="us-central1-a"
DEFAULT_MACHINE_TYPE="e2-micro"
DEFAULT_VM_NAME="slowloris-victim"
DEFAULT_DISK_SIZE="10GB"
DEFAULT_IMAGE="ubuntu-2004-lts"
DEFAULT_FIREWALL_RULE="slowloris-http-rule"

# Function to display usage
usage() {
    echo "Bonus Slowloris Lab - GCP Infrastructure Setup (One-Time)"
    echo "Creates VM and prepares environment for server deployments"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "This script creates the complete GCP infrastructure for slowloris testing."
    echo "After setup, use deploy-server.sh and deploy-attack.sh for testing."
    echo ""
    echo "OPTIONS:"
    echo "  --project PROJECT        GCP project ID (auto-detected if not specified)"
    echo "  --zone ZONE             GCP zone (default: $DEFAULT_ZONE)"
    echo "  --vm-name NAME          VM instance name (default: $DEFAULT_VM_NAME)"
    echo "  --help                  Show this help message"
    echo ""
    echo "Prerequisites:"
    echo "  1. Create GCP project at console.cloud.google.com"
    echo "  2. Install gcloud CLI and run 'gcloud auth login'"
    echo "  3. Uses GCP Free Tier (no billing required)"
    echo ""
    echo "Free Tier Resources Used:"
    echo "  - VM: $DEFAULT_MACHINE_TYPE (free tier eligible)"
    echo "  - Disk: $DEFAULT_DISK_SIZE standard persistent disk"
    echo "  - Image: $DEFAULT_IMAGE"
    echo "  - Network: Default VPC (no additional charges)"
    echo ""
    echo "Example:"
    echo "  $0 --project my-slowloris-project"
    echo "  $0 --project my-project --zone us-west1-a"
}

# Function to log messages
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

# Function to create/update gcp.env configuration file
create_gcp_config() {
    local project_id=$1
    local external_ip=$2
    local zone=$3
    local vm_name=$4
    local machine_type=$5
    local firewall_rule=$6
    local config_file="gcp.env"
    
    log "Creating GCP configuration file: $config_file"
    cat > "$config_file" << EOF
# Bonus Slowloris Lab - GCP Configuration
# Auto-generated by setup-gcp-infrastructure.sh on $(date)
# Single source of truth for all GCP deployment scripts

# GCP Project Configuration
GCP_PROJECT_ID=$project_id
GCP_ZONE=$zone
GCP_REGION=${zone%-*}

# VM Configuration
GCP_VM_NAME=$vm_name
GCP_MACHINE_TYPE=$machine_type

# Network Configuration (auto-populated)
TARGET_IP=$external_ip

# Firewall Configuration
FIREWALL_RULE_NAME=$firewall_rule

# Slowloris Lab Specific Configuration
SERVER_VARIANTS=old,latest
DEFAULT_SERVER_TYPE=old
DEFAULT_PORT=8080

# Attack Configuration Defaults
DEFAULT_CONNECTIONS_BASIC=256
DEFAULT_CONNECTIONS_ADVANCED=512
DEFAULT_CONNECTIONS_CLOUD=512

# Metadata
CREATED_DATE=$(date -Iseconds)
LAST_UPDATED=$(date -Iseconds)
EOF
    
    log_success "GCP configuration saved to $config_file"
}

# Function to check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if gcloud is installed
    if ! command -v gcloud &> /dev/null; then
        log_error "gcloud CLI is not installed."
        echo ""
        echo "Please install gcloud CLI:"
        echo "  curl https://sdk.cloud.google.com | bash"
        echo "  exec -l \$SHELL"
        echo "  gcloud init"
        exit 1
    fi
    
    # Check if user is authenticated
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
        log_error "Not authenticated with gcloud."
        echo ""
        echo "Please authenticate:"
        echo "  gcloud auth login"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Function to setup GCP project
setup_project() {
    local project="$1"
    
    if [ -z "$project" ]; then
        # Try to auto-detect project
        project=$(gcloud config get-value project 2>/dev/null || echo "")
        
        if [ -z "$project" ]; then
            log_error "No GCP project specified and none configured."
            echo ""
            echo "Please either:"
            echo "  1. Set default project: gcloud config set project YOUR_PROJECT_ID"
            echo "  2. Use --project flag: $0 --project YOUR_PROJECT_ID"
            echo ""
            echo "To create a new project:"
            echo "  1. Go to https://console.cloud.google.com/projectcreate"
            echo "  2. Create a new project (must have billing enabled)"
            echo "  3. Note the Project ID"
            exit 1
        fi
    fi
    
    log "Using GCP project: $project"
    
    # Verify project exists and we have access
    if ! gcloud projects describe "$project" >/dev/null 2>&1; then
        log_error "Cannot access project '$project'. Please check:"
        echo "  1. Project ID is correct"
        echo "  2. You have appropriate permissions"
        echo "  3. Project has billing enabled"
        exit 1
    fi
    
    # Set the project
    gcloud config set project "$project" --quiet
    
    log_success "Project configured: $project"
    echo "$project"
}

# Function to enable required APIs
enable_apis() {
    log "Enabling required GCP APIs..."
    
    local apis=(
        "compute.googleapis.com"
    )
    
    for api in "${apis[@]}"; do
        log "Enabling $api..."
        gcloud services enable "$api" --quiet
    done
    
    log_success "All required APIs enabled"
}

# Function to create firewall rule
create_firewall_rule() {
    local firewall_rule="$1"
    
    log "Creating firewall rule: $firewall_rule"
    
    # Check if firewall rule already exists
    if gcloud compute firewall-rules describe "$firewall_rule" >/dev/null 2>&1; then
        log_warning "Firewall rule '$firewall_rule' already exists, skipping creation"
        return 0
    fi
    
    # Create firewall rule for HTTP traffic
    gcloud compute firewall-rules create "$firewall_rule" \
        --allow tcp:8080 \
        --source-ranges 0.0.0.0/0 \
        --description "Allow HTTP traffic for slowloris lab" \
        --quiet
    
    log_success "Firewall rule created: $firewall_rule"
}

# Function to create VM instance
create_vm_instance() {
    local vm_name="$1"
    local zone="$2"
    local machine_type="$3"
    local image="$4"
    local disk_size="$5"
    
    log "Creating VM instance: $vm_name"
    
    # Check if VM already exists
    if gcloud compute instances describe "$vm_name" --zone="$zone" >/dev/null 2>&1; then
        log_warning "VM instance '$vm_name' already exists"
        
        local vm_status=$(gcloud compute instances describe "$vm_name" \
            --zone="$zone" \
            --format="get(status)")
        
        if [ "$vm_status" != "RUNNING" ]; then
            log "Starting existing VM..."
            gcloud compute instances start "$vm_name" --zone="$zone" --quiet
            sleep 30  # Wait for VM to start
        fi
        
        log_success "Using existing VM: $vm_name"
        return 0
    fi
    
    # Create the VM instance
    gcloud compute instances create "$vm_name" \
        --zone="$zone" \
        --machine-type="$machine_type" \
        --network-interface=network-tier=PREMIUM,subnet=default \
        --maintenance-policy=MIGRATE \
        --provisioning-model=STANDARD \
        --service-account=$(gcloud iam service-accounts list --format="value(email)" --filter="displayName:Compute Engine default service account" | head -n1) \
        --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
        --create-disk=auto-delete=yes,boot=yes,device-name="$vm_name",image-family="$image",image-project=ubuntu-os-cloud,mode=rw,size="$disk_size",type=projects/$(gcloud config get-value project)/zones/"$zone"/diskTypes/pd-standard \
        --no-shielded-secure-boot \
        --shielded-vtpm \
        --shielded-integrity-monitoring \
        --reservation-affinity=any \
        --quiet
    
    # Wait for VM to be ready
    log "Waiting for VM to be ready..."
    sleep 60
    
    # Test SSH connectivity
    local retry_count=0
    local max_retries=5
    
    while [ $retry_count -lt $max_retries ]; do
        if gcloud compute ssh "$vm_name" --zone="$zone" --command="echo 'VM is ready'" --quiet >/dev/null 2>&1; then
            break
        fi
        
        retry_count=$((retry_count + 1))
        log "Waiting for SSH connectivity (attempt $retry_count/$max_retries)..."
        sleep 30
    done
    
    if [ $retry_count -eq $max_retries ]; then
        log_error "VM created but SSH connectivity failed"
        return 1
    fi
    
    log_success "VM instance created and ready: $vm_name"
}

# Function to get VM external IP
get_vm_ip() {
    local vm_name="$1"
    local zone="$2"
    
    local ip=$(gcloud compute instances describe "$vm_name" \
        --zone="$zone" \
        --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
    
    echo "$ip"
}


# Function to display setup summary
display_summary() {
    local project="$1"
    local zone="$2"
    local vm_name="$3"
    local vm_ip="$4"
    
    echo ""
    log_success "=== GCP Infrastructure Setup Complete ==="
    echo ""
    echo -e "${GREEN}Project:${NC} $project"
    echo -e "${GREEN}Zone:${NC} $zone"
    echo -e "${GREEN}VM Name:${NC} $vm_name"
    echo -e "${GREEN}VM IP:${NC} $vm_ip"
    echo -e "${GREEN}Machine Type:${NC} $DEFAULT_MACHINE_TYPE (free tier eligible)"
    echo ""
    echo -e "${GREEN}Configuration File:${NC} gcp.env (persistent settings for all deployments)"
    echo ""
    echo -e "${GREEN}Next Steps:${NC}"
    echo "  1. Deploy server: ./deploy-server.sh [old|latest] gcp"
    echo "  2. Launch attack: ./deploy-attack.sh [basic|advanced|cloud] gcp"
    echo "  3. Monitor: SSH to VM or use GCP Console"
    echo ""
    echo -e "${GREEN}Useful Commands:${NC}"
    echo "  # SSH to VM:"
    echo "  gcloud compute ssh $vm_name --zone=$zone"
    echo ""
    echo "  # Stop VM (to save costs):"
    echo "  ./deploy-server.sh --stop"
    echo ""
    echo "  # Completely destroy infrastructure:"
    echo "  ./deploy-server.sh --destruct-vm"
    echo ""
    echo -e "${YELLOW}Cost Optimization:${NC}"
    echo "  - VM uses free tier e2-micro instance"
    echo "  - Stop VM when not in use to avoid charges"
    echo "  - Destroy resources completely when done with lab"
    echo ""
}

# Parse command line arguments
PROJECT=""
ZONE="$DEFAULT_ZONE"
VM_NAME="$DEFAULT_VM_NAME"

while [[ $# -gt 0 ]]; do
    case $1 in
        --project)
            PROJECT="$2"
            shift 2
            ;;
        --zone)
            ZONE="$2"
            shift 2
            ;;
        --vm-name)
            VM_NAME="$2"
            shift 2
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown argument: $1"
            usage
            exit 1
            ;;
    esac
done

# Main execution flow
log "Starting GCP infrastructure setup for slowloris lab..."
echo ""

# Check prerequisites
check_prerequisites

# Setup project
PROJECT=$(setup_project "$PROJECT")

# Enable APIs
enable_apis

# Create firewall rule
create_firewall_rule "$DEFAULT_FIREWALL_RULE"

# Create VM instance
create_vm_instance "$VM_NAME" "$ZONE" "$DEFAULT_MACHINE_TYPE" "$DEFAULT_IMAGE" "$DEFAULT_DISK_SIZE"

# Get VM IP
VM_IP=$(get_vm_ip "$VM_NAME" "$ZONE")

if [ -z "$VM_IP" ]; then
    log_error "Failed to get VM external IP"
    exit 1
fi

# Save configuration to gcp.env
create_gcp_config "$PROJECT" "$VM_IP" "$ZONE" "$VM_NAME" "$DEFAULT_MACHINE_TYPE" "$DEFAULT_FIREWALL_RULE"

# Display summary
display_summary "$PROJECT" "$ZONE" "$VM_NAME" "$VM_IP"

log_success "Setup complete! Infrastructure is ready for slowloris lab."