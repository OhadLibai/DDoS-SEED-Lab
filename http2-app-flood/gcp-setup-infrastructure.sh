#!/bin/bash
# HTTP/2 Flood Lab - GCP Infrastructure Setup (One-Time)
# Creates VM and prepares environment for server deployments

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Default Configuration (can be overridden by gcp.env)
VM_NAME="http2-flood-lab"
ZONE="us-central1-a"
REGION="us-central1"
MACHINE_TYPE="f1-micro"  # GCP Free Tier eligible
FIREWALL_RULE_NAME="allow-http2-lab"

# Function to create/update gcp.env configuration file
create_gcp_config() {
    local project_id=$1
    local external_ip=$2
    local config_file="gcp.env"
    
    print_info "Creating GCP configuration file: $config_file"
    cat > "$config_file" << EOF
# HTTP/2 Flood Lab - GCP Configuration
# Auto-generated by gcp-setup-infrastructure.sh on $(date)
# Single source of truth for all GCP deployment scripts

# GCP Project Configuration
GCP_PROJECT_ID=$project_id
GCP_ZONE=$ZONE
GCP_REGION=$REGION

# VM Configuration
GCP_VM_NAME=$VM_NAME
GCP_MACHINE_TYPE=$MACHINE_TYPE

# Network Configuration (auto-populated)
TARGET_IP=$external_ip

# Firewall Configuration
FIREWALL_RULE_NAME=$FIREWALL_RULE_NAME

# Metadata
CREATED_DATE=$(date -Iseconds)
LAST_UPDATED=$(date -Iseconds)
EOF
    
    print_success "GCP configuration saved to $config_file"
}

usage() {
    echo "HTTP/2 Flood Lab - Infrastructure Setup"
    echo ""
    echo "Usage: $0 PROJECT_ID [options]"
    echo ""
    echo "This script creates the complete GCP infrastructure for HTTP/2 flood testing."
    echo "After setup, use deploy-server.sh and deploy-attack.sh for testing."
    echo ""
    echo "Arguments:"
    echo "  PROJECT_ID  Your GCP project ID (required)"
    echo ""
    echo "Options:"
    echo "  --force     Delete existing VM and create new one"
    echo "  --help      Show this help message"
    echo ""
    echo "Prerequisites:"
    echo "  1. Create GCP project at console.cloud.google.com"
    echo "  2. Install gcloud CLI and run 'gcloud auth login'"
    echo "  3. Uses GCP Free Tier (no billing required)"
    echo ""
    exit 1
}

# Parse arguments
PROJECT_ID=""
FORCE=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE=true
            shift
            ;;
        --help)
            usage
            ;;
        -*)
            print_error "Unknown option: $1"
            usage
            ;;
        *)
            if [ -z "$PROJECT_ID" ]; then
                PROJECT_ID="$1"
            else
                print_error "Too many arguments"
                usage
            fi
            shift
            ;;
    esac
done

# Auto-detect project if not provided
if [ -z "$PROJECT_ID" ]; then
    DETECTED_PROJECT=$(gcloud config get-value project 2>/dev/null || echo "")
    if [ -n "$DETECTED_PROJECT" ]; then
        PROJECT_ID="$DETECTED_PROJECT"
        print_info "Auto-detected GCP project: $PROJECT_ID"
    else
        print_error "No PROJECT_ID provided and no default project configured in gcloud!"
        print_info "Either provide PROJECT_ID or run: gcloud config set project YOUR_PROJECT_ID"
        usage
    fi
fi

# Check if gcloud is available
if ! command -v gcloud &> /dev/null; then
    print_error "gcloud CLI not found. Please install Google Cloud SDK:"
    print_info "  curl https://sdk.cloud.google.com | bash"
    print_info "  exec -l \$SHELL"
    print_info "  gcloud auth login"
    exit 1
fi

print_info "Setting up HTTP/2 Flood Lab Infrastructure on GCP"
print_info "Project ID: $PROJECT_ID"

# Set project and region
print_info "Configuring gcloud..."
gcloud config set project $PROJECT_ID
gcloud config set compute/region $REGION
gcloud config set compute/zone $ZONE

# Enable required APIs
print_info "Enabling Compute Engine API..."
gcloud services enable compute.googleapis.com

# Check if VM already exists
if gcloud compute instances describe $VM_NAME --zone=$ZONE &>/dev/null; then
    if [ "$FORCE" = true ]; then
        print_warning "Deleting existing VM..."
        gcloud compute instances delete $VM_NAME --zone=$ZONE --quiet
    else
        print_error "VM '$VM_NAME' already exists!"
        print_info "Use --force to recreate, or use deploy-server.sh to deploy on existing VM."
        exit 1
    fi
fi

# Create startup script
print_info "Creating VM startup script..."
cat > /tmp/startup-script.sh << 'EOF'
#!/bin/bash
# VM Setup Script for HTTP/2 Flood Lab

set -e
apt-get update

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
usermod -aG docker $USER

# Install Docker Compose
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Install additional tools
apt-get install -y git curl htop

# Create auto-shutdown (2 hours)
echo "sudo shutdown -h now" | at now + 2 hours

# Signal completion
touch /tmp/setup-complete
echo "VM setup completed successfully" >> /var/log/startup-script.log
EOF

print_info "Creating VM instance..."
# Create VM with startup script
gcloud compute instances create $VM_NAME \
    --zone=$ZONE \
    --machine-type=$MACHINE_TYPE \
    --image-family=ubuntu-2004-lts \
    --image-project=ubuntu-os-cloud \
    --boot-disk-size=10GB \
    --boot-disk-type=pd-standard \
    --metadata-from-file startup-script=/tmp/startup-script.sh \
    --tags=http-server,https-server \
    --scopes=https://www.googleapis.com/auth/cloud-platform

# Create firewall rule if it doesn't exist
if ! gcloud compute firewall-rules describe $FIREWALL_RULE_NAME &>/dev/null; then
    print_info "Creating firewall rule..."
    gcloud compute firewall-rules create $FIREWALL_RULE_NAME \
        --allow tcp:8080 \
        --source-ranges 0.0.0.0/0 \
        --target-tags=http-server \
        --description "Allow HTTP/2 Flood Lab traffic on port 8080"
fi

# Wait for VM to be ready
print_info "Waiting for VM to be ready (this may take 2-3 minutes)..."
sleep 30

# Wait for startup script to complete
print_info "Waiting for dependency installation to complete..."
for i in {1..24}; do
    if gcloud compute ssh $VM_NAME --zone=$ZONE --command="test -f /tmp/setup-complete" &>/dev/null; then
        print_success "VM setup completed!"
        break
    fi
    print_info "Still setting up dependencies... ($i/24)"
    sleep 15
done

# Verify Docker is working
if ! gcloud compute ssh $VM_NAME --zone=$ZONE --command="docker --version && docker-compose --version" &>/dev/null; then
    print_error "Docker installation failed. Check VM logs:"
    print_info "  gcloud compute ssh $VM_NAME --zone=$ZONE"
    print_info "  sudo journalctl -u google-startup-scripts.service"
    exit 1
fi

# Get VM external IP
EXTERNAL_IP=$(gcloud compute instances describe $VM_NAME \
    --zone=$ZONE \
    --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

# Clean up temporary file
rm -f /tmp/startup-script.sh

# Create GCP configuration file
create_gcp_config "$PROJECT_ID" "$EXTERNAL_IP"

print_success "GCP Infrastructure setup completed successfully!"
echo ""
print_info "VM Details:"
echo "  Name: $VM_NAME"
echo "  Zone: $ZONE"
echo "  External IP: $EXTERNAL_IP"
echo "  Machine Type: $MACHINE_TYPE (GCP Free Tier)"
echo "  Project: $PROJECT_ID"
echo ""
print_success "Configuration saved to: gcp.env"
print_info "All deployment scripts will use this configuration file as single source of truth."
echo ""
print_success "Ready for HTTP/2 Flood Lab testing!"
echo ""
print_info "Next Steps:"
echo "  1. Deploy server:  ./deploy-server.sh --gcp part-A"
echo "  2. Attack server:  ./deploy-attack.sh --gcp part-A"
echo "  3. Monitor lab:    curl --http2-prior-knowledge http://$EXTERNAL_IP:8080/health"
echo ""
print_info "VM Management:"
echo "  Connect to VM:     gcloud compute ssh $VM_NAME --zone=$ZONE"
echo "  Stop VM:           ./deploy-server.sh --gcp --stop"
echo "  Start VM:          gcloud compute instances start $VM_NAME --zone=$ZONE"
echo ""
print_warning "VM will auto-shutdown after 2 hours to prevent unexpected charges."
print_info "Use the start command above to restart if needed."